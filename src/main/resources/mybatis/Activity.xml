<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Activity">

	<resultMap id="MusicLikeResult" type="MusicLike">
		<result property="music_like_sq" column="music_like_sq"/>
		<result property="target_sq" column="target_sq"/>
		<result property="member_sq" column="member_sq"/>
		<result property="music_like_type" column="music_like_type"/>
	</resultMap>


	<!--JAN 1. 좋아요 눌렀을때 실행되는 메소드 -->
	<insert id="clickLikeAlbum" parameterType="java.util.Map">
		INSERT INTO music_like(
			music_like_sq,member_sq,target_sq,music_like_type
		) VALUES (
			music_like_sq.NEXTVAL, #{id},#{likeAlbum},'LI1'
		)
	</insert>
	<insert id="clickLikeMusic" parameterType="java.util.Map">
		INSERT INTO music_like(
			music_like_sq,member_sq,target_sq,music_like_type
		) VALUES (
			music_like_sq.NEXTVAL, #{id},#{likeMusic},'LI2'
		)
	</insert>
	
	<!--JAN 다시 좋아하는 되돌리기 -->
	<update id="unLikeCancel" parameterType="java.util.Map">
		
		
		UPDATE music_like
		<if test="music_like_type=='언라이크앨범'">
		SET music_like_type = 'LI1'
		</if>
		<if test="music_like_type=='언라이크곡'">
		SET music_like_type = 'LI2'
		</if>
		WHERE music_like_sq = #{unLikeCancel}
		
	</update>
	
	<!--JAN 좋아요 동일 시퀀스 레코드체크 -->
	<select id="likeCount" resultType="int">
		SELECT COUNT(*)
		FROM music_like
		WHERE member_sq = #{member_sq}
		AND target_sq = #{target_sq}
	</select>
	
	<!--JAN unlike -->
	<!-- <delete id="clickUnlike">
		DELETE FROM music_like
		WHERE music_like_sq = #{unLike}
	</delete> -->
	
	<!--JAN 안좋아하려구  -->
	<update id="clickUnlikeAlbum" parameterType="int">
		UPDATE music_like
		SET music_like_type = 'LI3' 
		WHERE music_like_sq = #{unLike}
	</update>
	<!--JAN  -->
	<update id="clickUnlikeMusic" parameterType="int">
		UPDATE music_like
		SET music_like_type = 'LI4' 
		WHERE music_like_sq = #{unLike}
	</update>
	
	
	
	<!-- JAN : 0612 LIKE 누른 목록 확인-->
	<select id="selectAllLikeList" resultType="AllLikeList" parameterType="int">
		<!-- select * from(
  (select * from(
    select l.music_like_sq,l.target_sq, l.music_like_type,nvl(f.follow_sq,0),f.target_sq as other_sq
		      , a.album_nm,  a.img_path, m.nick, count(l.target_sq) AlbumLikeCount
		       , 1 music_sq, 'm' music_nm, 1 music_like, a.album_sq, c.code_meaning
		from music_like l, album a, member m, code c ,follow f
		where l.member_sq = #{id}
		and l.target_sq = a.album_sq
		and m.member_sq = a.member_sq
		and l.music_like_type = c.code_cd
		and c.code_meaning = '앨범'
    and f.member_sq=#{id}
		group by l.music_like_sq,l.target_sq, l.music_like_type
		      , a.album_nm,  a.img_path, m.nick, a.album_sq, c.code_meaning, f.follow_sq,f.target_sq
		order by l.music_like_sq DESC ))
		
		union all

    (select * from
    (
		select l.music_like_sq,l.target_sq, l.music_like_type, nvl(f.follow_sq,0),f.target_sq as other_sq
		        ,'a' album_nm, 'a' img_path, b.nick,1 AlbumLikeCount
		        ,m.music_sq, m.music_nm, m.music_like, 1 album_sq, c.code_meaning
		from music_like l, music m, member b, album a, code c, follow f
		where l.member_sq = #{id}
		and l.target_sq = m.music_sq
		and b.member_sq = a.member_sq
		and a.album_sq = m.album_sq
		and l.music_like_type = c.code_cd
		and c.code_meaning = '곡'
    and f.member_sq=#{id}
		order by l.music_like_sq DESC)
    )
    )
 -->
 
		SELECT  CHECKCNTFOLLOW_SQ(#{id},m.member_sq) as cntFollow
		       ,a.album_sq, a.img_path, a.album_nm,  m.member_sq, m.nick,ml.music_like_sq
		       ,0 music_sq, c.code_meaning
		       ,ALBUM_COUNT(a.album_sq) as like_count
		From code c, album a, member m, music_like ml, FOLLOW f
		Where c.code_meaning='앨범'
		AND ml.member_sq=#{id}
		and ml.target_sq=a.album_sq
		and a.member_sq=m.member_sq
    	AND c.code_cd=ml.music_like_type
		group by a.album_sq, a.img_path,a.album_nm,m.member_sq, m.nick, music_sq, c.code_meaning,ml.music_like_sq
		UNION ALL
		SELECT  CHECKCNTFOLLOW_SQ(#{id},m.member_sq) as cntFollow
		       ,a.album_sq, a.img_path, a.album_nm,  m.member_sq, m.nick,ml.music_like_sq
		       , mu.music_sq, c.code_meaning
		       ,ALBUM_COUNT(mu.music_sq) as like_count
		From code c, album a, member m, music_like ml, FOLLOW f, music mu
		Where c.code_meaning='곡'
		AND ml.member_sq=#{id}
		and ml.target_sq=mu.music_sq
		and a.album_sq=mu.album_sq
		and a.member_sq=m.member_sq
    	AND c.code_cd=ml.music_like_type
		group by a.album_sq, a.img_path,a.album_nm,m.member_sq, m.nick, mu.music_sq, c.code_meaning,ml.music_like_sq
	</select>
	
	
	<!-- JAN : 0614 UNLIKE 누른 목록 확인-->
	<select id="selectUnLikeList" resultType="AllLikeList" parameterType="int">
		SELECT  CHECKCNTFOLLOW_SQ(#{id},m.member_sq) as cntFollow
		       ,a.album_sq, a.img_path, a.album_nm,  m.member_sq, m.nick,ml.music_like_sq
		       ,0 music_sq, c.code_meaning
		       ,ALBUM_COUNT(a.album_sq) as like_count
		From code c, album a, member m, music_like ml, FOLLOW f
		Where c.code_meaning='언라이크앨범'
		AND ml.member_sq=#{id}
		and ml.target_sq=a.album_sq
		and a.member_sq=m.member_sq
    	AND c.code_cd=ml.music_like_type
		group by a.album_sq, a.img_path,a.album_nm,m.member_sq, m.nick, music_sq, c.code_meaning,ml.music_like_sq
		UNION ALL
		SELECT  CHECKCNTFOLLOW_SQ(#{id},m.member_sq) as cntFollow
		       ,a.album_sq, a.img_path, a.album_nm,  m.member_sq, m.nick,ml.music_like_sq
		       , mu.music_sq, c.code_meaning
		       ,ALBUM_COUNT(mu.music_sq) as like_count
		From code c, album a, member m, music_like ml, FOLLOW f, music mu
		Where c.code_meaning='언라이크곡'
		AND ml.member_sq=#{id}
		and ml.target_sq=mu.music_sq
		and a.album_sq=mu.album_sq
		and a.member_sq=m.member_sq
    	AND c.code_cd=ml.music_like_type
		group by a.album_sq, a.img_path,a.album_nm,m.member_sq, m.nick, mu.music_sq, c.code_meaning,ml.music_like_sq
		</select>
	
	<!-- JAN 팔로잉 내가 팔로우 하는 사람 목록 -->
	<select id="selectFollowing" resultType="Member" parameterType="int">
		select m.member_sq, m.nick
	    from follow f, member m
	    where f.target_sq = m.member_sq
	    and
	    f.member_sq = #{id}
	    order by follow_sq DESC
	
	</select>
	
	<!-- JAN  팔로워  나를 팔로우 하는사람 -->
	<select id="selectFollower" resultType="Member" parameterType="int">
		select m.member_sq, m.nick
	    from member m, follow f
	    where f.target_sq = #{id}
	    and m.member_sq = f.member_sq
	    order by follow_sq DESC
	</select>
	
	<!-- JAN follow 팔로우 누르면 팔로우됨 -->
	<insert id="follow" parameterType="Follow" >
	
	INSERT all
	into
	follow VALUES (
			follow_sq.NEXTVAL, #{target_sq}, #{member_sq}
		)
	into
	alarm VALUES (
			alarm_sq.NEXTVAL, #{target_sq},follow_sq.CURRVAL,
			'팔로우','N'
	)
	SELECT *
      FROM DUAL
	
	</insert>
	<!-- JAN 중복팔로우방지용 팔로우시퀀스 체크쿼리 -->
	<select id="followCheck" parameterType="java.util.Map" resultType="int">
		select count(follow_sq) as cnt
		from follow
		where member_sq = #{me}
		and target_sq = #{target_sq} 
		
	</select>
	
	<!-- JAN 언팔 -->
	<delete id="unfollow" parameterType="java.util.Map" >
		DELETE FROM follow
		WHERE member_sq = #{member_sq}
		AND target_sq = #{target_sq}
	</delete>

	<!-- PHmaruho -->
	<select id="selectAlbumType" resultType="Code">
		SELECT *
		FROM code
		WHERE CODE_CATEGORY = 'AT'
	</select>
	
	<select id="selectMusicTag" resultType="Tag">
		select *
		from tag
		start with TAG_CATEGORY is null
		CONNECT BY PRIOR TAG_CD = TAG_CATEGORY
	</select>
	
	<!-- 최우일 -->
	<select id="selectMusicDetail" parameterType="int" resultType="hashMap">
		select m.*, a.*, a.music_sq album_music_sq from music m, album a where m.music_sq = #{sq} and m.album_sq = a.album_sq
	</select>
	
	<!-- 최우일 -->
	<select id="selectMusicArtists" parameterType="int" resultType="Member">
		select m.* from artist a, member m where a.music_sq = #{sq} and a.member_sq = m.member_sq
	</select>
</mapper>
